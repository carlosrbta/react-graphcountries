{"version":3,"sources":["pages/Countries/index.js","components/Loading.js","components/NoResults.js","pages/Country/index.js","pages/CountryEdit/index.js","App.js","serviceWorker.js","client.js","index.js"],"names":["Meta","Card","COUNTRIES","gql","Countries","useState","name","setName","history","useHistory","useQuery","variables","undefined","loading","data","list","Country","className","gutter","xs","sm","md","lg","xl","size","placeholder","value","onChange","e","target","key","title","description","map","flag","capital","hoverable","onClick","push","onClickItem","cover","src","svgFile","alt","length","Loading","delay","NoResults","backlink","type","Title","Typography","Text","COUNTRY","match","google","params","country","emptyData","flex","level","strong","area","population","topLevelDomains","lv","updateQuery","distanceToOtherCountries","onFinish","values","a","prevData","Array","isArray","split","setTimeout","class","initialValues","t","layout","wrapperCol","span","Item","label","rules","required","message","htmlType","Header","Layout","Footer","Content","App","href","rel","path","exact","component","CountryEdit","Boolean","window","location","hostname","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wlBAOQA,EAASC,IAATD,KAEFE,EAAYC,YAAH,KAyEAC,EA7DG,WAAO,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,KAEhBC,EAAUC,cAFM,EAIIC,YAASR,EAAW,CAC5CS,UAAW,CAAEL,KAAMA,QAAQM,KADrBC,EAJc,EAIdA,QAASC,EAJK,EAILA,KAQXC,EAAQD,GAAQA,EAAKE,SAAY,GAEvC,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CAAKC,OAAQ,GAAID,UAAU,cACzB,kBAAC,IAAD,CAAKE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACrC,kBAAC,IAAD,CACEC,KAAK,QACLC,YAAY,oBACZC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAQqB,EAAEC,OAAOH,YAIvCb,EACC,kBAAC,IAAD,CAAKK,OAAQ,IACX,kBAAC,IAAD,CAAKY,IAAKxB,EAAMa,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAChD,kBAAC,IAAD,CAAMV,QAASA,GACb,kBAACb,EAAD,CAAM+B,MAAM,aAAaC,YAAY,+BAK3C,kBAAC,IAAD,CAAKd,OAAQ,GAAID,UAAU,YACzB,oCACGF,EAAKkB,KAAI,gBAAGC,EAAH,EAAGA,KAAM5B,EAAT,EAASA,KAAM6B,EAAf,EAAeA,QAAf,OACR,kBAAC,IAAD,CAAKL,IAAKxB,EAAMa,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAChD,kBAAC,IAAD,CACEV,QAASA,EACTuB,WAAS,EACTC,QAAS,kBAlCL,SAAC/B,GACnBE,EAAQ8B,KAAKhC,GAiCgBiC,CAAYjC,IAC3BkC,MAAO,yBAAKC,IAAKP,EAAKQ,QAASC,IAAKrC,KAEpC,kBAACN,EAAD,CAAM+B,MAAOzB,EAAM0B,YAAaG,SAIrB,IAAhBpB,EAAK6B,QACJ,kBAAC,IAAD,6BACuB,2BAAItC,GAD3B,S,2BClECuC,EAFC,kBAAM,kBAAC,IAAD,CAAMC,MAAO,OCgBpBC,EAfG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAU1C,EAAW,EAAXA,KACvBE,EAAUC,cAChB,OACE,kBAAC,IAAD,CAAKS,OAAQ,GAAID,UAAU,YACzB,kBAAC,IAAD,6BACuB,2BAAIX,GAD3B,IAEG0C,GACC,kBAAC,IAAD,CAAQC,KAAK,OAAOZ,QAAS,kBAAM7B,EAAQ8B,KAAKU,KAAhD,e,sSCFFE,EAAgBC,IAAhBD,MAAOE,EAASD,IAATC,KAEFC,EAAUlD,YAAH,KA4ELa,EA3DC,SAAC,GAAuB,IAArBsC,EAAoB,EAApBA,MACX9C,GAD+B,EAAb+C,OACR9C,eACRH,EAASgD,EAAME,OAAflD,KAF6B,EAIXI,YAAS2C,EAAS,CAC1C1C,UAAW,CAAEL,UADPO,EAJ6B,EAI7BA,QAASC,EAJoB,EAIpBA,KAIX2C,EAAU3C,EAAOA,EAAKE,QAAQ,GAAK,GACnC0C,EAAY5C,GAAgC,IAAxBA,EAAKE,QAAQ4B,OAEvC,OAAI/B,EAAgB,kBAAC,EAAD,MAEhB6C,EAEA,yBAAKzC,UAAU,gBACb,kBAAC,EAAD,CAAW+B,SAAS,IAAI1C,KAAMA,KAMlC,yBAAKW,UAAU,gBACb,kBAAC,IAAD,CAAKC,OAAQ,GAAID,UAAU,mBACzB,kBAAC,IAAD,CAAK0C,KAAK,SACR,yBAAKlB,IAAKgB,EAAQvB,KAAKQ,QAASC,IAAKc,EAAQnD,QAG/C,kBAAC,IAAD,CAAKa,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACrC,kBAAC2B,EAAD,CAAOU,MAAO,GAAIH,EAAQnD,MAC1B,kBAAC8C,EAAD,CAAMS,QAAM,GAAZ,YACW,kBAACT,EAAD,KAAOK,EAAQtB,UAE1B,kBAACiB,EAAD,CAAMS,QAAM,GAAZ,SACQ,kBAACT,EAAD,KAAOK,EAAQK,OAEvB,kBAACV,EAAD,CAAMS,QAAM,GAAZ,eACc,kBAACT,EAAD,KAAOK,EAAQM,aAE7B,kBAACX,EAAD,CAAMS,QAAM,GAAZ,oBACoB,IACjBJ,EAAQO,gBAAgB/B,KAAI,SAACgC,GAAD,OAC3B,kBAACb,EAAD,CAAMtB,IAAKmC,EAAG3D,MAAO2D,EAAG3D,YAKhC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKa,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGN,UAAU,cAClD,kBAAC,IAAD,CAAQoB,QAAS,kBAAM7B,EAAQ8B,KAAR,WAAiBmB,EAAQnD,KAAzB,YAAvB,QAGA,kBAAC,IAAD,CAAQ+B,QAAS,kBAAM7B,EAAQ8B,KAAK,OAApC,Y,mVCvEFY,EAAUC,IAAVD,MAEFG,EAAUlD,YAAH,KA2IEa,EA1HC,SAAC,GAAuB,IAArBsC,EAAoB,EAApBA,MACX9C,GAD+B,EAAb+C,OACR9C,eACRH,EAASgD,EAAME,OAAflD,KAF6B,EAIEI,YAAS2C,EAAS,CACvD1C,UAAW,CAAEL,UADPO,EAJ6B,EAI7BA,QAASC,EAJoB,EAIpBA,KAAMoD,EAJc,EAIdA,YAIjBT,EAAU3C,EACZA,EAAKE,QAAQ,GACb,CAAEkB,KAAM,GAAI8B,gBAAiB,GAAIG,yBAA0B,IAEzDC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACPR,EAA+CO,EAA/CP,KAAM3B,EAAyCkC,EAAzClC,QAAS4B,EAAgCM,EAAhCN,WAAYC,EAAoBK,EAApBL,gBADpB,SAGTE,GAAY,SAACK,GACjB,MAAO,CACLvD,QAAS,CAAC,2BAEHuD,EAASvD,QAAQ,IAFf,IAGL8C,OACA3B,UACA4B,aACAC,gBAAiBQ,MAAMC,QAAQT,GAC3BA,EACAA,EAAgBU,MAAM,YAbnB,OAmBfC,YAAW,WACTnE,EAAQ8B,KAAR,WAAiBmB,EAAQnD,SACxB,KArBY,2CAAH,sDA0Bd,GAAIO,EAAS,OAAO,kBAAC,EAAD,MAEpB,GAAIC,GAAgC,IAAxBA,EAAKE,QAAQ4B,OACvB,OACE,yBAAKgC,MAAM,gBACT,kBAAC,EAAD,CAAW5B,SAAS,IAAI1C,KAAMA,KAKpC,IAAMuE,EAAgB,CACpB1C,QAASsB,EAAQtB,QACjB2B,KAAML,EAAQK,KACdC,WAAYN,EAAQM,WACpBC,gBAAiBP,EAAQO,gBAAgB/B,KAAI,SAAC6C,GAAD,OAAOA,EAAExE,SAGxD,OACE,yBAAKW,UAAU,qBACb,kBAAC,IAAD,CAAKC,OAAQ,GAAID,UAAU,mBACzB,kBAAC,IAAD,CAAK0C,KAAK,SACR,yBAAKlB,IAAKgB,EAAQvB,KAAKQ,QAASC,IAAKc,EAAQnD,QAG/C,kBAAC,IAAD,CAAKa,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvC,kBAAC,EAAD,CAAOqC,MAAO,GAAIH,EAAQnD,MAE1B,kBAAC,IAAD,CACEA,KAAK,QACLyE,OAAO,WACPF,cAAeA,EACfT,SAAUA,EACVY,WAAY,CAAE5D,GAAI,CAAE6D,KAAM,IAAM5D,GAAI,CAAE4D,KAAM,IAAM3D,GAAI,CAAE2D,KAAM,KAE9D,kBAAC,IAAKC,KAAN,CACEC,MAAM,UACN7E,KAAK,UACL8E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,0BAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,OACN7E,KAAK,OACL8E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,uBAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,aACN7E,KAAK,aACL8E,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,iCACN7E,KAAK,kBACL8E,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,mCAG7B,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CAAWjE,UAAU,eACnB,kBAAC,IAAD,CAAQgC,KAAK,UAAUsC,SAAS,UAAhC,UAIA,kBAAC,IAAD,CAAQlD,QAAS,kBAAM7B,EAAQ8B,KAAR,WAAiBmB,EAAQnD,SAAhD,c,SCnINkF,G,OAA4BC,IAA5BD,QAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAwCTC,EAtCH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACJ,EAAD,+BAEE,uBACEK,KAAK,oDACLhE,OAAO,SACPiE,IAAI,sBACJ7E,UAAU,eAJZ,SASF,kBAAC0E,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,IAAIC,OAAO,EAAMC,UAAW7F,IACxC,kBAAC,IAAD,CAAO2F,KAAK,SAASC,OAAK,EAACC,UAAWjF,IACtC,kBAAC,IAAD,CAAO+E,KAAK,cAAcE,UAAWC,MAGzC,kBAACR,EAAD,2BACmB,IACjB,uBACEG,KAAK,gCACLhE,OAAO,SACPiE,IAAI,uBAHN,eAFF,6BCpBYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShD,MACvB,2D,YChBOiD,EAAS,IAAIC,IAAa,CACrCC,IAAK,8CCIPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.5b22320b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useHistory } from \"react-router-dom\";\nimport { Card, Col, Row, Input } from \"antd\";\nimport \"./styles.scss\";\n\nconst { Meta } = Card;\n\nconst COUNTRIES = gql`\n  query($name: String) {\n    Country(name: $name) {\n      name\n      capital\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n\nconst Countries = () => {\n  const [name, setName] = useState(\"\");\n  const history = useHistory();\n\n  const { loading, data } = useQuery(COUNTRIES, {\n    variables: { name: name || undefined },\n  });\n\n  const onClickItem = (name) => {\n    history.push(name);\n  };\n\n  const list = (data && data.Country) || [];\n\n  return (\n    <div className=\"page-countries\">\n      <Row gutter={16} className=\"row-search\">\n        <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n          <Input\n            size=\"large\"\n            placeholder=\"Search country...\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </Col>\n      </Row>\n      {loading ? (\n        <Row gutter={16}>\n          <Col key={name} xs={24} sm={12} md={8} lg={6} xl={4}>\n            <Card loading={loading}>\n              <Meta title=\"Card title\" description=\"This is the description\" />\n            </Card>\n          </Col>\n        </Row>\n      ) : (\n        <Row gutter={16} className=\"row-list\">\n          <>\n            {list.map(({ flag, name, capital }) => (\n              <Col key={name} xs={24} sm={12} md={8} lg={6} xl={4}>\n                <Card\n                  loading={loading}\n                  hoverable\n                  onClick={() => onClickItem(name)}\n                  cover={<img src={flag.svgFile} alt={name} />}\n                >\n                  <Meta title={name} description={capital} />\n                </Card>\n              </Col>\n            ))}\n            {list.length === 0 && (\n              <Col>\n                No results found for <b>{name}</b>.\n              </Col>\n            )}\n          </>\n        </Row>\n      )}\n    </div>\n  );\n};\n\nexport default Countries;\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nconst Loading = () => <Spin delay={500}></Spin>;\n\nexport default Loading;\n","import React from \"react\";\nimport { Button, Row, Col } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\n\nconst NoResults = ({ backlink, name }) => {\n  const history = useHistory();\n  return (\n    <Row gutter={16} className=\"row-list\">\n      <Col>\n        No results found for <b>{name}</b>.\n        {backlink && (\n          <Button type=\"link\" onClick={() => history.push(backlink)}>\n            Go Back.\n          </Button>\n        )}\n      </Col>\n    </Row>\n  );\n};\nexport default NoResults;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Row, Col, Typography } from \"antd\";\nimport Loading from \"../../components/Loading\";\nimport NoResults from \"../../components/NoResults\";\nimport \"./styles.scss\";\n\nconst { Title, Text } = Typography;\n\nexport const COUNTRY = gql`\n  query($name: String!) {\n    Country(name: $name) {\n      name\n      capital\n      area\n      population\n      topLevelDomains {\n        name\n      }\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n\nconst Country = ({ match, google }) => {\n  const history = useHistory();\n  const { name } = match.params;\n\n  const { loading, data } = useQuery(COUNTRY, {\n    variables: { name },\n  });\n\n  const country = data ? data.Country[0] : {};\n  const emptyData = data && data.Country.length === 0;\n\n  if (loading) return <Loading />;\n\n  if (emptyData) {\n    return (\n      <div className=\"page-country\">\n        <NoResults backlink=\"/\" name={name} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page-country\">\n      <Row gutter={16} className=\"details-country\">\n        <Col flex=\"207px\">\n          <img src={country.flag.svgFile} alt={country.name} />\n        </Col>\n\n        <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n          <Title level={4}>{country.name}</Title>\n          <Text strong>\n            Capital: <Text>{country.capital}</Text>\n          </Text>\n          <Text strong>\n            Area: <Text>{country.area}</Text>\n          </Text>\n          <Text strong>\n            Population: <Text>{country.population}</Text>\n          </Text>\n          <Text strong>\n            Top-level Domain:{\" \"}\n            {country.topLevelDomains.map((lv) => (\n              <Text key={lv.name}>{lv.name}</Text>\n            ))}\n          </Text>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={24} sm={12} md={8} lg={6} xl={4} className=\"footer-btn\">\n          <Button onClick={() => history.push(`/${country.name}/edit`)}>\n            Edit\n          </Button>\n          <Button onClick={() => history.push(\"/\")}>Back</Button>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Country;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Row, Col, Typography, Form, Input } from \"antd\";\nimport Loading from \"../../components/Loading\";\nimport NoResults from \"../../components/NoResults\";\nimport \"./styles.scss\";\n\nconst { Title } = Typography;\n\nconst COUNTRY = gql`\n  query($name: String!) {\n    Country(name: $name) {\n      name\n      capital\n      area\n      population\n      topLevelDomains {\n        name\n      }\n      flag {\n        svgFile\n      }\n    }\n  }\n`;\n\nconst Country = ({ match, google }) => {\n  const history = useHistory();\n  const { name } = match.params;\n\n  const { loading, data, updateQuery } = useQuery(COUNTRY, {\n    variables: { name },\n  });\n\n  const country = data\n    ? data.Country[0]\n    : { flag: {}, topLevelDomains: [], distanceToOtherCountries: [] };\n\n  const onFinish = async (values) => {\n    const { area, capital, population, topLevelDomains } = values;\n\n    await updateQuery((prevData) => {\n      return {\n        Country: [\n          {\n            ...prevData.Country[0],\n            area,\n            capital,\n            population,\n            topLevelDomains: Array.isArray(topLevelDomains)\n              ? topLevelDomains\n              : topLevelDomains.split(\",\"),\n          },\n        ],\n      };\n    });\n\n    setTimeout(() => {\n      history.push(`/${country.name}`);\n    }, 400);\n  };\n\n  // useEffect(() => {}, [data]);\n\n  if (loading) return <Loading />;\n\n  if (data && data.Country.length === 0) {\n    return (\n      <div class=\"page-country\">\n        <NoResults backlink=\"/\" name={name} />\n      </div>\n    );\n  }\n\n  const initialValues = {\n    capital: country.capital,\n    area: country.area,\n    population: country.population,\n    topLevelDomains: country.topLevelDomains.map((t) => t.name),\n  };\n\n  return (\n    <div className=\"page-edit-country\">\n      <Row gutter={16} className=\"details-country\">\n        <Col flex=\"207px\">\n          <img src={country.flag.svgFile} alt={country.name} />\n        </Col>\n\n        <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n          <Title level={4}>{country.name}</Title>\n\n          <Form\n            name=\"basic\"\n            layout=\"vertical\"\n            initialValues={initialValues}\n            onFinish={onFinish}\n            wrapperCol={{ sm: { span: 24 }, md: { span: 12 }, lg: { span: 6 } }}\n          >\n            <Form.Item\n              label=\"Capital\"\n              name=\"capital\"\n              rules={[{ required: true, message: \"Capital is required!\" }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Area\"\n              name=\"area\"\n              rules={[{ required: true, message: \"Area is required!\" }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Population\"\n              name=\"population\"\n              rules={[{ required: true, message: \"Population is required!\" }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Top-level Domain (comma split)\"\n              name=\"topLevelDomains\"\n              rules={[\n                { required: true, message: \"Top-level Domain is required!\" },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item className=\"form-footer\">\n              <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n              </Button>\n\n              <Button onClick={() => history.push(`/${country.name}`)}>\n                Back\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Country;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Countries from \"./pages/Countries\";\nimport Country from \"./pages/Country\";\nimport CountryEdit from \"./pages/CountryEdit\";\nimport { Layout } from \"antd\";\nimport \"./App.scss\";\n\nconst { Header, Footer, Content } = Layout;\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Header>\n          React - Graph countries\n          <a\n            href=\"https://github.com/lennertVanSever/graphcountries\"\n            target=\"_BLANK\"\n            rel=\"noopener noreferrer\"\n            className=\"header-docs\"\n          >\n            docs\n          </a>\n        </Header>\n        <Content>\n          <Switch>\n            <Route path=\"/\" exact={true} component={Countries} />\n            <Route path=\"/:name\" exact component={Country} />\n            <Route path=\"/:name/edit\" component={CountryEdit} />\n          </Switch>\n        </Content>\n        <Footer>\n          © Copyright 2020{\" \"}\n          <a\n            href=\"https://github.com/carlosrbta\"\n            target=\"_BLANK\"\n            rel=\"noopener noreferrer\"\n          >\n            @carlosrbta\n          </a>\n          . All rights reserved.\n        </Footer>\n      </Layout>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from \"apollo-boost\";\n\nexport const client = new ApolloClient({\n  uri: \"https://countries-274616.ew.r.appspot.com\",\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { client } from \"./client\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}